// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: audit/types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.v2.Audit {

  /// <summary>Holder for reflection information generated from audit/types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for audit/types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFhdWRpdC90eXBlcy5wcm90bxIPbmVvLmZzLnYyLmF1ZGl0GhByZWZzL3R5",
            "cGVzLnByb3RvIvQDCg9EYXRhQXVkaXRSZXN1bHQSMQoHdmVyc2lvbhgBIAEo",
            "CzIXLm5lby5mcy52Mi5yZWZzLlZlcnNpb25SB3ZlcnNpb24SHwoLYXVkaXRf",
            "ZXBvY2gYAiABKAZSCmF1ZGl0RXBvY2gSPgoMY29udGFpbmVyX2lkGAMgASgL",
            "MhsubmVvLmZzLnYyLnJlZnMuQ29udGFpbmVySURSC2NvbnRhaW5lcklEEh0K",
            "CnB1YmxpY19rZXkYBCABKAxSCXB1YmxpY0tleRIaCghjb21wbGV0ZRgFIAEo",
            "CFIIY29tcGxldGUSGgoIcmVxdWVzdHMYBiABKA1SCHJlcXVlc3RzEhgKB3Jl",
            "dHJpZXMYByABKA1SB3JldHJpZXMSMQoHcGFzc19zZxgIIAMoCzIYLm5lby5m",
            "cy52Mi5yZWZzLk9iamVjdElEUgZwYXNzU0cSMQoHZmFpbF9zZxgJIAMoCzIY",
            "Lm5lby5mcy52Mi5yZWZzLk9iamVjdElEUgZmYWlsU0cSEAoDaGl0GAogASgN",
            "UgNoaXQSEgoEbWlzcxgLIAEoDVIEbWlzcxISCgRmYWlsGAwgASgNUgRmYWls",
            "Eh0KCnBhc3Nfbm9kZXMYDSADKAxSCXBhc3NOb2RlcxIdCgpmYWlsX25vZGVz",
            "GA4gAygMUglmYWlsTm9kZXNCTFo1Z2l0aHViLmNvbS9uc3BjYy1kZXYvbmVv",
            "ZnMtYXBpLWdvL3YyL2F1ZGl0L2dycGM7YXVkaXSqAhJOZW9GUy5BUEkudjIu",
            "QXVkaXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NeoFS.API.v2.Refs.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.v2.Audit.DataAuditResult), global::NeoFS.API.v2.Audit.DataAuditResult.Parser, new[]{ "Version", "AuditEpoch", "ContainerId", "PublicKey", "Complete", "Requests", "Retries", "PassSg", "FailSg", "Hit", "Miss", "Fail", "PassNodes", "FailNodes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// DataAuditResult keeps record of conducted Data Audits. The detailed report is
  /// generated separately.
  /// </summary>
  public sealed partial class DataAuditResult : pb::IMessage<DataAuditResult> {
    private static readonly pb::MessageParser<DataAuditResult> _parser = new pb::MessageParser<DataAuditResult>(() => new DataAuditResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAuditResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.v2.Audit.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAuditResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAuditResult(DataAuditResult other) : this() {
      version_ = other.version_ != null ? other.version_.Clone() : null;
      auditEpoch_ = other.auditEpoch_;
      containerId_ = other.containerId_ != null ? other.containerId_.Clone() : null;
      publicKey_ = other.publicKey_;
      complete_ = other.complete_;
      requests_ = other.requests_;
      retries_ = other.retries_;
      passSg_ = other.passSg_.Clone();
      failSg_ = other.failSg_.Clone();
      hit_ = other.hit_;
      miss_ = other.miss_;
      fail_ = other.fail_;
      passNodes_ = other.passNodes_.Clone();
      failNodes_ = other.failNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAuditResult Clone() {
      return new DataAuditResult(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private global::NeoFS.API.v2.Refs.Version version_;
    /// <summary>
    /// Data Audit Result format version. Effectively the version of API library
    /// used to report DataAuditResult structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.v2.Refs.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "audit_epoch" field.</summary>
    public const int AuditEpochFieldNumber = 2;
    private ulong auditEpoch_;
    /// <summary>
    /// Epoch number when the Data Audit was conducted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuditEpoch {
      get { return auditEpoch_; }
      set {
        auditEpoch_ = value;
      }
    }

    /// <summary>Field number for the "container_id" field.</summary>
    public const int ContainerIdFieldNumber = 3;
    private global::NeoFS.API.v2.Refs.ContainerID containerId_;
    /// <summary>
    /// Container under audit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.v2.Refs.ContainerID ContainerId {
      get { return containerId_; }
      set {
        containerId_ = value;
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 4;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Public key of the auditing InnerRing node in a binary format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 5;
    private bool complete_;
    /// <summary>
    /// Shows if Data Audit process was complete in time or if it was cancelled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 6;
    private uint requests_;
    /// <summary>
    /// Number of request done at PoR stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Requests {
      get { return requests_; }
      set {
        requests_ = value;
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 7;
    private uint retries_;
    /// <summary>
    /// Number of retries done at PoR stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    /// <summary>Field number for the "pass_sg" field.</summary>
    public const int PassSgFieldNumber = 8;
    private static readonly pb::FieldCodec<global::NeoFS.API.v2.Refs.ObjectID> _repeated_passSg_codec
        = pb::FieldCodec.ForMessage(66, global::NeoFS.API.v2.Refs.ObjectID.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID> passSg_ = new pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID>();
    /// <summary>
    /// List of Storage Groups that passed audit PoR stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID> PassSg {
      get { return passSg_; }
    }

    /// <summary>Field number for the "fail_sg" field.</summary>
    public const int FailSgFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NeoFS.API.v2.Refs.ObjectID> _repeated_failSg_codec
        = pb::FieldCodec.ForMessage(74, global::NeoFS.API.v2.Refs.ObjectID.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID> failSg_ = new pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID>();
    /// <summary>
    /// List of Storage Groups that failed audit PoR stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.v2.Refs.ObjectID> FailSg {
      get { return failSg_; }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 10;
    private uint hit_;
    /// <summary>
    /// Number of sampled objects under audit placed in an optimal way according to
    /// the containers placement policy when checking PoP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hit {
      get { return hit_; }
      set {
        hit_ = value;
      }
    }

    /// <summary>Field number for the "miss" field.</summary>
    public const int MissFieldNumber = 11;
    private uint miss_;
    /// <summary>
    /// Number of sampled objects under audit placed in suboptimal way according to
    /// the containers placement policy, but still at a satisfactory level when
    /// checking PoP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Miss {
      get { return miss_; }
      set {
        miss_ = value;
      }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 12;
    private uint fail_;
    /// <summary>
    /// Number of sampled objects under audit stored in a way not confirming
    /// placement policy or not found at all when checking PoP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fail {
      get { return fail_; }
      set {
        fail_ = value;
      }
    }

    /// <summary>Field number for the "pass_nodes" field.</summary>
    public const int PassNodesFieldNumber = 13;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_passNodes_codec
        = pb::FieldCodec.ForBytes(106);
    private readonly pbc::RepeatedField<pb::ByteString> passNodes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of storage node public keys that passed at least one PDP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> PassNodes {
      get { return passNodes_; }
    }

    /// <summary>Field number for the "fail_nodes" field.</summary>
    public const int FailNodesFieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_failNodes_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> failNodes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// List of storage node public keys that failed at least one PDP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FailNodes {
      get { return failNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAuditResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAuditResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Version, other.Version)) return false;
      if (AuditEpoch != other.AuditEpoch) return false;
      if (!object.Equals(ContainerId, other.ContainerId)) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Complete != other.Complete) return false;
      if (Requests != other.Requests) return false;
      if (Retries != other.Retries) return false;
      if(!passSg_.Equals(other.passSg_)) return false;
      if(!failSg_.Equals(other.failSg_)) return false;
      if (Hit != other.Hit) return false;
      if (Miss != other.Miss) return false;
      if (Fail != other.Fail) return false;
      if(!passNodes_.Equals(other.passNodes_)) return false;
      if(!failNodes_.Equals(other.failNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (version_ != null) hash ^= Version.GetHashCode();
      if (AuditEpoch != 0UL) hash ^= AuditEpoch.GetHashCode();
      if (containerId_ != null) hash ^= ContainerId.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (Requests != 0) hash ^= Requests.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      hash ^= passSg_.GetHashCode();
      hash ^= failSg_.GetHashCode();
      if (Hit != 0) hash ^= Hit.GetHashCode();
      if (Miss != 0) hash ^= Miss.GetHashCode();
      if (Fail != 0) hash ^= Fail.GetHashCode();
      hash ^= passNodes_.GetHashCode();
      hash ^= failNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      if (AuditEpoch != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(AuditEpoch);
      }
      if (containerId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ContainerId);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PublicKey);
      }
      if (Complete != false) {
        output.WriteRawTag(40);
        output.WriteBool(Complete);
      }
      if (Requests != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Requests);
      }
      if (Retries != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Retries);
      }
      passSg_.WriteTo(output, _repeated_passSg_codec);
      failSg_.WriteTo(output, _repeated_failSg_codec);
      if (Hit != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Hit);
      }
      if (Miss != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Miss);
      }
      if (Fail != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Fail);
      }
      passNodes_.WriteTo(output, _repeated_passNodes_codec);
      failNodes_.WriteTo(output, _repeated_failNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (AuditEpoch != 0UL) {
        size += 1 + 8;
      }
      if (containerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContainerId);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (Requests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Requests);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Retries);
      }
      size += passSg_.CalculateSize(_repeated_passSg_codec);
      size += failSg_.CalculateSize(_repeated_failSg_codec);
      if (Hit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hit);
      }
      if (Miss != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Miss);
      }
      if (Fail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fail);
      }
      size += passNodes_.CalculateSize(_repeated_passNodes_codec);
      size += failNodes_.CalculateSize(_repeated_failNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAuditResult other) {
      if (other == null) {
        return;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::NeoFS.API.v2.Refs.Version();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.AuditEpoch != 0UL) {
        AuditEpoch = other.AuditEpoch;
      }
      if (other.containerId_ != null) {
        if (containerId_ == null) {
          ContainerId = new global::NeoFS.API.v2.Refs.ContainerID();
        }
        ContainerId.MergeFrom(other.ContainerId);
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      if (other.Requests != 0) {
        Requests = other.Requests;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      passSg_.Add(other.passSg_);
      failSg_.Add(other.failSg_);
      if (other.Hit != 0) {
        Hit = other.Hit;
      }
      if (other.Miss != 0) {
        Miss = other.Miss;
      }
      if (other.Fail != 0) {
        Fail = other.Fail;
      }
      passNodes_.Add(other.passNodes_);
      failNodes_.Add(other.failNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (version_ == null) {
              Version = new global::NeoFS.API.v2.Refs.Version();
            }
            input.ReadMessage(Version);
            break;
          }
          case 17: {
            AuditEpoch = input.ReadFixed64();
            break;
          }
          case 26: {
            if (containerId_ == null) {
              ContainerId = new global::NeoFS.API.v2.Refs.ContainerID();
            }
            input.ReadMessage(ContainerId);
            break;
          }
          case 34: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 40: {
            Complete = input.ReadBool();
            break;
          }
          case 48: {
            Requests = input.ReadUInt32();
            break;
          }
          case 56: {
            Retries = input.ReadUInt32();
            break;
          }
          case 66: {
            passSg_.AddEntriesFrom(input, _repeated_passSg_codec);
            break;
          }
          case 74: {
            failSg_.AddEntriesFrom(input, _repeated_failSg_codec);
            break;
          }
          case 80: {
            Hit = input.ReadUInt32();
            break;
          }
          case 88: {
            Miss = input.ReadUInt32();
            break;
          }
          case 96: {
            Fail = input.ReadUInt32();
            break;
          }
          case 106: {
            passNodes_.AddEntriesFrom(input, _repeated_passNodes_codec);
            break;
          }
          case 114: {
            failNodes_.AddEntriesFrom(input, _repeated_failNodes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
